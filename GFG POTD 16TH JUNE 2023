DSA POTD 16TH JUNE 2023;
Min Time
Given an array locations[] of size n where locations[i] represents the location of the ith fruit on the x-axis and also given an array types[] 
where types[i] is an integer which represents the type of the ith fruit. You are initially at coordinate 0 and you
have to collect all the fruits and then return back to coordinate 0 again. To move 1 unit on the x-axis requires 1 second of time.
The only condition is that you have to collect the fruits in a non-decreasing order of their types[i] 
(for example if ith fruit has type[i]=1 and jth fruit has type[j]=2 then ith fruit has to be picked before jth fruit). 
Find minimum time to collect all fruits in the non-decreasing order of their types and return back to coordinate 0.

Note: You can assume it takes no time to pick up fruit and the location of a fruit can be negative also.

Example 1:

Input:
n=4
locations={1,3,5,7}
types={1,2,3,1}
Output:
18
Explanation:
You start at x=0 and move to x=7 and 
in the way pick fruits of type 1 at x=1 
and x=7 and it took total 7 seconds to 
move from 0->7 now you move to x=3 
in 4 seconds and than to x=5 in 2 seconds 
and than return back to x=0 in 5 seconds.
So overall it took 18 seconds(7+4+2+5).

C++ CODE 

class Solution {
  public:
  unordered_map<int,int>mm1,mm2;
    long long help (int pos,int index,vector<int> &temp,vector<vector<long long>>&dp,int indication){
        if(index==temp.size())return 0;
        if(dp[index][indication]!=-1)return dp[index][indication];
        long long one=0,two=0;
        int left=mm1[temp[index]];
        int right=mm2[temp[index]];
        one=abs(pos-left)+abs(left-right)+help(right,index+1,temp,dp,1);
        if(index==temp.size()-1)one+=abs(right-0);
        two=abs(pos-right)+abs(right-left)+help(left,index+1,temp,dp,0);
        if(index==temp.size()-1)two+=abs(left-0);
        return  dp[index][indication]=min(one ,two);
    }
    long long minTime(int n, vector<int> &locations, vector<int> &types) {
        // code here
        int mx=*max_element(types.begin(),types.end());
        vector<int>ele(mx+1,0);
        for(int i=0;i<n;i++){
            ele[types[i]]=1;
            if(mm1.find(types[i])==mm1.end()){
                mm1[types[i]]=locations[i];
                mm2[types[i]]=locations[i];
            }
            else{
                mm1[types[i]]=min(mm1[types[i]],locations[i]);
                mm2[types[i]]=max(mm2[types[i]],locations[i]);
            }
        }
        vector<int> temp;
        for(int i=0;i<=mx;i++){
            if(ele[i]==1)temp.push_back(i);
        }
        vector<vector<long long>>dp(temp.size(),vector<long long>(2,-1));
        return help(0,0,temp,dp,0);
        
    }
};
